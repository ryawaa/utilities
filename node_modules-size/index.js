#!/usr/bin/env node

const fs = require("fs");
const path = require("path");

function findNodeModules(startPath, results = []) {
    if (!fs.existsSync(startPath)) {
        return results;
    }

    const files = fs.readdirSync(startPath, { withFileTypes: true });

    for (const file of files) {
        if (file.name === "node_modules" && file.isDirectory()) {
            results.push(path.join(startPath, file.name));
        } else if (file.isDirectory()) {
            // Skip going deeper if the directory itself is 'node_modules'
            if (file.name !== "node_modules") {
                findNodeModules(path.join(startPath, file.name), results);
            }
        }
    }

    return results;
}

function getDirectorySize(dirPath) {
    let totalSize = 0;
    const entries = fs.readdirSync(dirPath, { withFileTypes: true });
    for (const entry of entries) {
        const fullPath = path.join(dirPath, entry.name);
        if (entry.isDirectory()) {
            totalSize += getDirectorySize(fullPath);
        } else {
            totalSize += fs.statSync(fullPath).size;
        }
    }
    return totalSize;
}

(function main() {
    const startPath = process.argv[2] || ".";
    console.log(`Searching for node_modules in "${startPath}"...\n`);

    const nodeModulesPaths = findNodeModules(startPath);
    let totalAll = 0;

    nodeModulesPaths.forEach((nmPath) => {
        const size = getDirectorySize(nmPath);
        totalAll += size;
        console.log(`${nmPath} : ${(size / 1024 / 1024).toFixed(2)} MB`);
    });

    console.log(
        `\nTotal size of all node_modules: ${(totalAll / 1024 / 1024).toFixed(
            2
        )} MB`
    );
})();
